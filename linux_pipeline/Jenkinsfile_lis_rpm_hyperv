#!/usr/bin/env groovy

withCredentials(bindings: [string(credentialsId: 'LIS_OLD_ARCHIVE_VERSION', variable: 'LIS_OLD_ARCHIVE_VERSION')]) {
properties ([
    disableConcurrentBuilds(),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'DISTRO_VERSIONS',
            defaultValue: 'centos_all,rhel_all,oracle_all',
            description: 'Distros to be tested (default all)'],
        [$class: 'StringParameterDefinition',
            name: 'LIS_ARCHIVE_LINK',
            defaultValue: '',
            description: 'Link to the lis archive to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'LIS_OLD_ARCHIVE_LINK',
            defaultValue: "${LIS_OLD_ARCHIVE_VERSION}",
            description: 'Link to the previous lis version'],
        [$class: 'ChoiceParameterDefinition', choices: 'no\nyes',
            name: 'FULL_PERF_RUN',
            description: 'Full run local Hyper-V perf switch.'],
        [$class: 'StringParameterDefinition',
            name: 'ENABLED_STAGES',
            defaultValue: "deployment_scenarios,perf,validation",
            description: 'What stages to run']
        ]
    ]
])
}

// defines deploy scenarios coverage - platform independent
def nodesMap = ["sriov":"rhel_7.3,rhel_7.4,centos_7.4,centos_7.3,rhel_7.3_gen2vm,rhel_7.5,centos_7.5,", \
                "ws2012":"centos_6.8_32bit,centos_6.8_x64,centos_6.9_32bit,rhel_6.7_gen2vm,rhel_6.8_x64,", \
                "ws2012r2":"rhel_6.4_32bit,rhel_6.4_x64,rhel_6.5,rhel_6.6_x64,rhel_6.6_32bit, \
                    centos_6.4_x64,centos_6.5_x64,rhel_6.9_x64,", \
                "ws2016":"oracle_6.5_rhck,oracle_6.9_rhck,oracle_7.4_rhck,oracle_7.0_rhck,centos_7.0_x64, \
                    centos_7.0_gen2vm,centos_7.2_x64,rhel_7.0,rhel_7.1,rhel_7.2,rhel_6.10_x64,"]

// defines host version mapping for functional test validation
def validationNodesMap = ["ws2016":"rhel_6.10_x64,rhel_7.4,centos_6.5_x64,centos_7.3,centos_7.2_x64,rhel_7.5,centos_7.5,", \
                          "ws2012r2":"rhel_6.6_x64,centos_7.4_gen2vm,rhel_6.4_32bit,rhel_7.0,centos_6.4_x64,rhel_6.9_x64,", \
                          "ws2012_fvt":"centos_6.8_x64,", \
                          "ws2012_bvt":"rhel_7.1,"]

// defines test validation type - FVT or BVT
def validationXmlMap = ["lis_pipeline_fvt.xml":"centos_6.8_x64,centos_7.2_x64,rhel_6.6_x64,centos_7.4_gen2vm,rhel_6.10_x64,rhel_7.4,rhel_7.5,", \
                        "lis_pipeline_bvt.xml":"centos_6.4_x64,rhel_7.1,rhel_6.4_32bit,rhel_6.9_x64,rhel_7.0,centos_6.5_x64,centos_7.3,centos_7.5,"]

def supportedDistros = nodesMap["ws2012"] + nodesMap["ws2012r2"] + nodesMap["ws2016"] + nodesMap["sriov"]
def supportedValidationDistros = validationNodesMap["ws2012_fvt"] + validationNodesMap["ws2012_bvt"] + validationNodesMap["ws2012r2"] + validationNodesMap["ws2016"]

def PowerShellWrapper (psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat (script: "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\"",returnStatus: true)
}

def getDistros (distros, supportedDistros) {
    def validatedDistros = []
    suppList = supportedDistros.split(",")
    distros = distros.split(",")
    
    for (distro in distros) {
        distroType = distro.split("_")[0]
        distroVersion = distro.split("_")[1]
        
        if (distroVersion.toLowerCase() == "all") {
            for (suppDistro in suppList){
                if (distroType.toLowerCase() == suppDistro.split("_")[0]) {
                    validatedDistros << suppDistro
                }
            }
        } else {
            if (supportedDistros.contains(distro.toLowerCase())) {
                validatedDistros << distro.toLowerCase()
            }
        }
    }
    return validatedDistros
}

def getValidationXml (map, distro) {
    def xmlName = ''
    def testType = ''
    for (key in map.keySet()) {
        if (map[key].contains("${distro},")) {
            xmlName = key
            if(xmlName.contains("fvt")) {
                testType = "fvt"
            } else if (xmlName.contains("bvt")) {
                testType = "bvt"
            }
            break
        }
    }
    return [xmlName, testType]
}

DISTROS = getDistros (DISTRO_VERSIONS, supportedDistros)

stage ("Deploy stage") {
    def globalSleepTime = 0;
    def runs = [:]
    nodesMap.keySet().each {
        def testNode = it
        def mappedDistros = nodesMap[it]
        if (testNode != 'sriov') {
            testNode = 'ws2016'
        }
        DISTROS.each {
            if (mappedDistros.contains("${it},")) {
                runs ["${it}-${testNode}"] = {
                    node ("${testNode}") {
                        stage ("${it}-${testNode}") {
                            withCredentials(bindings: [string(credentialsId: 'LISA_IMAGES_SHARE_URL', variable: 'LISA_IMAGES_SHARE_URL'),
                                        string(credentialsId: 'AZURE_SAS', variable: 'AZURE_SAS'),
                                        string(credentialsId: 'LISA_TEST_DEPENDENCIES', variable: 'LISA_TEST_DEPENDENCIES'),
                                        string(credentialsId: 'LIS_SECRET_PARAMS', variable: 'LIS_SECRET_PARAMS'),
                                        string(credentialsId: 'LISA_LOG_DESTINATION', variable: 'LISA_LOG_DESTINATION'),
                                        string(credentialsId: 'DB_CONFIG_DEPLOY', variable: 'DB_CONFIG_DEPLOY')]) {
                                def sleepTime = globalSleepTime
                                globalSleepTime = globalSleepTime + 30
                                def lisSuite = ''
                                if (testNode == 'sriov') {
                                    lisSuite = 'lis_deploy_scenarios_sriov'
                                } else {
                                    lisSuite = 'lis_deploy_scenarios'
                                }
                                dir ("d${BUILD_NUMBER}") {
                                    checkout scm
                                    echo 'Running LISA...'
                                    PowerShellWrapper("""
                                        & '.\\scripts\\lis_hyperv_platform\\main-lis-rpm.ps1'
                                            -JobId '${it}-d-${BUILD_NUMBER}'
                                            -InstanceName '${it}-deploy'
                                            -DistroVersion '${it}' -WorkingDirectory 'C:\\workspace'
                                            -LISAImagesShareUrl '${LISA_IMAGES_SHARE_URL}' 
                                            -XmlTest 'lis_pipeline_deploy_scenarios.xml'
                                            -LisaTestDependencies '${LISA_TEST_DEPENDENCIES}'
                                            -LisUrl "\${env:LIS_ARCHIVE_LINK}"
                                            -LisOldUrl "\${env:LIS_OLD_ARCHIVE_LINK}"
                                            -LisaSuite '${lisSuite}'
                                            -LisaOptionalParams "\${env:LIS_SECRET_PARAMS}"
                                            -TestType 'deploy_scenarios'
                                            -LogsPath "\${env:LISA_LOG_DESTINATION}"
                                            -Delay '${sleepTime}'
                                            -ConfigPath "\${env:DB_CONFIG_DEPLOY}"
                                            -AzureToken "\${env:AZURE_SAS}"
                                        """)
                                    archiveArtifacts '\\lis-test\\WS2012R2\\lisa\\TestResults\\**\\*'
                                    junit (testResults: '\\lis-test\\WS2012R2\\lisa\\TestResults\\**\\*.xml', keepLongStdio: true)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    try {
        if(env.ENABLED_STAGES.contains("deployment_scenarios")) {
            parallel runs
        }
    } catch (exc) { 
        currentBuild.result = 'SUCCESS'
    }
}

node("jenkins-meta-slave") {
    stage('Local Hyper-V performance') {
            withCredentials(bindings:[ string(credentialsId: 'AZURE_SAS', variable: 'AZURE_SAS')]) {
                if(env.ENABLED_STAGES.contains("perf")) {
                    //build job: "performance-jobs/Pipeline_Performance_LIS", parameters: [
                    //    string(name: 'LIS_URL', value: "${env:LIS_ARCHIVE_LINK}"),
                    //    string(name: 'AZURE_TOKEN', value: "${env:AZURE_SAS}"),
                    //    string(name: 'FULL_PERF_RUN', value: "${env:FULL_PERF_RUN}"),], wait: false;
                    echo "Triggered LIS Local Hyper-V Performance tests."
                }
            }
        }
}

DISTROS = getDistros (DISTRO_VERSIONS, supportedValidationDistros)

stage("Validation stage") {
    def globalSleepTime = 0;
    def runs = [:]
    validationNodesMap.keySet().each {
        def testNode = it
        def mappedDistros = validationNodesMap[it]
        DISTROS.each {
            def XML_NAME = ''
            def TEST_TYPE = ''
            (XML_NAME, TEST_TYPE) = getValidationXml(validationXmlMap, it)
            if ((mappedDistros.contains("${it},")) && (XML_NAME) && (TEST_TYPE)) {
                runs["${TEST_TYPE}-${it}-${testNode}"] = {
                    node("${testNode}") {
                        stage("${TEST_TYPE}-${it}-${testNode}") {
                            withCredentials(bindings: [string(credentialsId: 'LISA_IMAGES_SHARE_URL', variable: 'LISA_IMAGES_SHARE_URL'),
                                        string(credentialsId: 'AZURE_SAS', variable: 'AZURE_SAS'),
                                        string(credentialsId: 'LISA_TEST_DEPENDENCIES', variable: 'LISA_TEST_DEPENDENCIES'),
                                        string(credentialsId: 'LISA_LOG_DESTINATION', variable: 'LISA_LOG_DESTINATION'),
                                        string(credentialsId: 'DB_CONFIG_VALIDATION', variable: 'DB_CONFIG_VALIDATION')]) { 
                                def sleepTime = globalSleepTime
                                globalSleepTime = globalSleepTime + 30
                                dir ("b${BUILD_NUMBER}") {
                                    checkout scm
                                    echo 'Running LISA...'
                                    PowerShellWrapper("""
                                        & '.\\scripts\\lis_hyperv_platform\\main-lis-rpm.ps1'
                                            -JobId '${it}-b-${BUILD_NUMBER}'
                                            -InstanceName '${it}-${TEST_TYPE}'
                                            -DistroVersion '${it}' -WorkingDirectory 'C:\\workspace'
                                            -LISAImagesShareUrl '${LISA_IMAGES_SHARE_URL}' 
                                            -XmlTest '${XML_NAME}'
                                            -LisaTestDependencies '${LISA_TEST_DEPENDENCIES}'
                                            -LisUrl "\${env:LIS_ARCHIVE_LINK}"
                                            -TestType '${TEST_TYPE}'
                                            -LogsPath "\${env:LISA_LOG_DESTINATION}"
                                            -Delay '${sleepTime}'
                                            -ConfigPath "\${env:DB_CONFIG_VALIDATION}"
                                            -AzureToken "\${env:AZURE_SAS}"
                                        """)
                                    archiveArtifacts '\\lis-test\\WS2012R2\\lisa\\TestResults\\**\\*'
                                    junit (testResults: '\\lis-test\\WS2012R2\\lisa\\TestResults\\**\\*.xml', keepLongStdio: true)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    try {
        if(env.ENABLED_STAGES.contains("validation")) {
            parallel runs
        }
    } catch (exc) {
        currentBuild.result = 'SUCCESS'
    }
}
